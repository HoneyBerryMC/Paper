From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: partydev <admin@partyrealms.com>
Date: Sun, 24 Nov 2024 11:30:35 -0800
Subject: [PATCH] Add addItemExcludingArmorAndQuickbar Method


diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index af1ae3dacb628da23f7d2988c6e76d3fb2d64103..da777cca87f198d3b911417f70a80d590cf4a99a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -255,6 +255,17 @@ public class CraftInventory implements Inventory {
         return -1;
     }
 
+    @Override
+    public int firstEmptyExcludingArmorAndQuickbar() {
+        ItemStack[] inventory = this.getStorageContents();
+        for (int i = 9; i < 34; i++) {
+            if (inventory[i] == null) {
+                return i;
+            }
+        }
+        return -1;
+    }
+
     @Override
     public boolean isEmpty() {
         return this.inventory.isEmpty();
@@ -288,6 +299,21 @@ public class CraftInventory implements Inventory {
         return -1;
     }
 
+    private int firstPartialExcludingArmorAndQuickbar(ItemStack item) {
+        ItemStack[] inventory = this.getStorageContents();
+        ItemStack filteredItem = CraftItemStack.asCraftCopy(item);
+        if (item == null) {
+            return -1;
+        }
+        for (int i = 9; i < 34; i++) {
+            ItemStack cItem = inventory[i];
+            if (cItem != null && cItem.getAmount() < cItem.getMaxStackSize() && cItem.isSimilar(filteredItem)) {
+                return i;
+            }
+        }
+        return -1;
+    }
+
     @Override
     public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
         Preconditions.checkArgument(items != null, "items cannot be null");
@@ -354,6 +380,73 @@ public class CraftInventory implements Inventory {
         }
         return leftover;
     }
+    // Paper start - AddItem Excluding Armor and Quickbar
+    @Override
+    public HashMap<Integer, ItemStack> addItemExcludingArmorAndQuickbar(ItemStack... items) {
+        Preconditions.checkArgument(items != null, "items cannot be null");
+        HashMap<Integer, ItemStack> leftover = new HashMap<>();
+
+        /* TODO: some optimization
+         *  - Create a 'firstPartial' with a 'fromIndex'
+         *  - Record the lastPartial per Material
+         *  - Cache firstEmpty result
+         */
+
+        for (int i = 0; i < items.length; i++) {
+            ItemStack item = items[i];
+            Preconditions.checkArgument(item != null, "ItemStack cannot be null");
+            while (true) {
+                // Do we already have a stack of it?
+                int firstPartial = this.firstPartialExcludingArmorAndQuickbar(item);
+
+                // Drat! no partial stack
+                if (firstPartial == -1) {
+                    // Find a free spot!
+                    int firstFree = this.firstEmptyExcludingArmorAndQuickbar();
+
+                    if (firstFree == -1) {
+                        // No space at all!
+                        leftover.put(i, item);
+                        break;
+                    } else {
+                        // More than a single stack!
+                        if (item.getAmount() > this.getMaxItemStack()) {
+                            CraftItemStack stack = CraftItemStack.asCraftCopy(item);
+                            stack.setAmount(this.getMaxItemStack());
+                            this.setItem(firstFree, stack);
+                            item.setAmount(item.getAmount() - this.getMaxItemStack());
+                        } else {
+                            // Just store it
+                            this.setItem(firstFree, item);
+                            break;
+                        }
+                    }
+                } else {
+                    // So, apparently it might only partially fit, well lets do just that
+                    ItemStack partialItem = this.getItem(firstPartial);
+
+                    int amount = item.getAmount();
+                    int partialAmount = partialItem.getAmount();
+                    int maxAmount = partialItem.getMaxStackSize();
+
+                    // Check if it fully fits
+                    if (amount + partialAmount <= maxAmount) {
+                        partialItem.setAmount(amount + partialAmount);
+                        // To make sure the packet is sent to the client
+                        this.setItem(firstPartial, partialItem);
+                        break;
+                    }
+
+                    // It fits partially
+                    partialItem.setAmount(maxAmount);
+                    // To make sure the packet is sent to the client
+                    this.setItem(firstPartial, partialItem);
+                    item.setAmount(amount + partialAmount - maxAmount);
+                }
+            }
+        }
+        return leftover;
+    }
 
     @Override
     public HashMap<Integer, ItemStack> removeItem(ItemStack... items) {
