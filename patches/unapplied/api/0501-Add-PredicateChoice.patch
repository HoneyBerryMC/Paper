UpdateFrom 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: partydev <admin@partyrealms.com>
Date: Sat, 12 Oct 2024 14:18:24 -0700
Subject: [PATCH] Add PredicateChoice


diff --git a/src/main/java/org/bukkit/inventory/PredicateChoiceImpl.java b/src/main/java/org/bukkit/inventory/PredicateChoiceImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..d3a5e7558284fc203bf1693cf91d16f66facd23a
--- /dev/null
+++ b/src/main/java/org/bukkit/inventory/PredicateChoiceImpl.java
@@ -0,0 +1,35 @@
+package org.bukkit.inventory;
+
+import org.jetbrains.annotations.NotNull;
+import java.util.List;
+import java.util.function.Predicate;
+
+/**
+ * Package private implementation for @{link org.bukkit.inventory.RecipeChoice.PredicateChoice}
+ * @param predicate - The Item predicate
+ * @param choices - The recipe book choices
+ */
+
+record PredicateChoiceImpl(Predicate<ItemStack> predicate, List<ItemStack> choices) implements RecipeChoice.PredicateChoice {
+    @Override
+    public @NotNull ItemStack getItemStack() {
+        ItemStack stack = new ItemStack(choices.get(0));
+        if (choices.size() > 1) {
+            stack.setDurability(Short.MAX_VALUE);
+            return stack;
+        }
+        return stack;
+    }
+    @Override
+    public @NotNull RecipeChoice clone() {
+        return new PredicateChoiceImpl(predicate, recipeBookExamples());
+    }
+    @Override
+    public boolean test(@NotNull final ItemStack itemStack) {
+        return predicate.test(itemStack);
+    }
+    @Override
+    public List<ItemStack> recipeBookExamples() {
+        return List.copyOf(choices);
+    }
+}
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index f1aa67997f904953742e8895e49341c2f73d44a2..9c19c136e9f9dc4f3f262d8a0272c04dc4e2ef7b 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -290,4 +290,33 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
         // Paper end - check valid ingredients
     }
+    // Paper start - Adding PredicateChoice
+    /**
+     * Represents a choice that matches when the item predicate is fulfilled.
+     */
+    interface PredicateChoice extends RecipeChoice {
+        static PredicateChoice create(@NotNull Predicate<ItemStack> predicate, ItemStack... recipeBookExamples) {
+            Objects.requireNonNull(predicate, "The item predicate cannot be null!");
+            Objects.requireNonNull(recipeBookExamples, "The mustHaveRecipeBookExample cannot be null!");
+            if (recipeBookExamples.length == 0) throw new IllegalArgumentException("Please provide at least one recipe book example item!");
+            return new PredicateChoiceImpl(predicate, List.of(recipeBookExamples));
+        }
+        static PredicateChoice create(@NotNull Predicate<ItemStack> predicate, java.util.Collection<ItemStack> recipeBookExamples) {
+            Objects.requireNonNull(predicate, "The item predicate cannot be null!");
+            Objects.requireNonNull(recipeBookExamples, "The mustHaveRecipeBookExample cannot be null!");
+            if (recipeBookExamples.isEmpty()) throw new IllegalArgumentException("Please provide at least one recipe book example item!");
+            return new PredicateChoiceImpl(predicate, List.copyOf(recipeBookExamples));
+        }
+        /**
+         * Returns the Item predicate
+         * @return - The item predicate
+         */
+        Predicate<ItemStack> predicate();
+        /**
+         * Returns the recipeBookExamples
+         * @return - The recipe book examples
+         */
+        List<ItemStack> recipeBookExamples();
+    }
+    // Paper end - Adding PredicateChoice
 }
